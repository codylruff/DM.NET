using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace DM_Lib
{
    //'-----------------------------------------------
    //' Table 1: "standard_specifications"
    //'-----------------------------------------------
    //' Id (Auto-Generated by sqlite)
    //' Material_Id
    //' Time_Stamp (Auto-Generated by spec manager)
    //' Spec_Type
    //' Json_Text
    //'------------------------------------------------
    //'-----------------------------------------------
    //' Table 2: "modified_specifications"
    //'-----------------------------------------------
    //' Id (Auto-Generated by sqlite)
    //' Material_Id
    //' Time_Stamp (Auto-Generated by spec manager)
    //' Spec_Type
    //' Json_Text
    //'------------------------------------------------
    //'------------------------------------------------
    //' Suggested Program Flow
    //'------------------------------------------------
    //' Get some user input from the GUI
    //' SpecManager -> GetSpec()
    //' If Default spec procedure -> Table 1
    //' If true -> DataAccess.Get(Table(true)
    //' Get json from Table 1/2 -> DatabaseRecord
    //' json_text = DatabaseRecord.Fields("Json_Text)
    //' spec = Factory.CreateISpec()
    //' spec.JsonText = json_text
    //' JsonToObject(json_text) -> SetProperties()
    //' Print properties -> GUI
    //' GUI -> spec changes -> apply to ISpec object
    //' ObjectToJson() -> Reprint for verification
    //' SpecManager.CommitSpec() -> DataAccess.Push() 
    //' ***Commits should be to Table 2 only
    //'------------------------------------------------
    public static class SpecManager
    {
        public static ISpec GetSpecification(string material_id)
        {
            // Call database
            string json_text = DataAccess.GetSpecJson(material_id, "standard_specifications");
            // return an ISpec object for manipulation by spec manager
            return DeserializeSpecification(json_text);
        }

        public static void CommitSpecification(ISpec spec)
        {
            DataAccess.PushSpec(spec.MaterialId, SerializeSpecification(spec), spec.SpecType);
        }

        public static string GetPrintableSpecification(ISpec spec)
        {   
            return spec.ToString();
        }

        private static string SerializeSpecification(ISpec spec)
        {
            return JsonConvert.SerializeObject(spec);
        }

        private static ISpec DeserializeSpecification(string json_text)
        {
            return JsonConvert.DeserializeObject<WarpingSpecification>(json_text);
        }
    }
}
